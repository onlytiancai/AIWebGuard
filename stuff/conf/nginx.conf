load_module modules/ngx_http_geoip2_module.so;
worker_processes  2;
error_log logs/error.log;
events { worker_connections 1024; }
http {
    lua_code_cache on;
    geoip2 /usr/local/GeoIP2/GeoLite2-City.mmdb {
        $geoip2_data_country_code default=CN source=$remote_addr country iso_code;
    }
    lua_shared_dict config_refresh_events 1M;

    init_worker_by_lua_file "conf/load_black_list.lua";

    server {
        listen 8088;

        # refresh config 
        location /refresh-config {
            content_by_lua_block {
                local events = ngx.shared.config_refresh_events
                for id = 0, ngx.worker.count() - 1 do
                    events:set("event_signal_" .. id, 1)
                end
                ngx.say("Event signal has been triggered for all workers")
            }
        }

        # 防火墙逻辑
        access_by_lua_block {
            local country_code = ngx.var.geoip2_data_country_code
            local value = lrucache:get(country_code)
            local keys = lrucache:get_keys()
            local json = require("cjson.safe")

            ngx.log(ngx.ERR, "access logic: ", country_code, value, json.encode(keys))
            if value == true then
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end
        }

        # 模仿被保护的正常业务逻辑, root, content_by_lua_block 可以被保护
        # return 执行会早于 access_by_lua_block，所以不能被保护
        location / {
            default_type text/html;
            content_by_lua_block { ngx.say(string.format("hello: %s",ngx.var.geoip2_data_country_code)) }
            # return 200 "hello: $remote_addr $geoip2_data_country_code\n";
            # root /var/www/html;
        }
    }
}
